// ESE Evaluation & Recognition System - Prisma Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// NextAuth Models
// ============================================================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================================================
// User & RBAC
// ============================================================================

enum UserRole {
  CEO // Superadmin
  PC // People & Culture (Admin)
  LEAD // Leadership (Nominator/Voter/Rater)
  STAFF // Regular staff
}

enum UserSegment {
  Language // Language Division (Blues)
  International // International (Greens)
  Whole // Whole school
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  name          String?
  role          UserRole    @default(STAFF)
  segment       UserSegment @default(Whole)
  title         String?
  department    String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]

  // EOM Relations
  nominations         EomNomination[] @relation("Nominator")
  receivedNominations EomNomination[] @relation("Nominee")
  votes               EomVote[]
  wins                EomWinner[]

  // MRE Relations
  raterAssignments  MreAssignment[] @relation("Rater")
  targetAssignments MreAssignment[] @relation("Target")

  // Activity
  activityLogs  ActivityLog[]
  notifications Notification[]
  CEO    // Superadmin
  PC     // People & Culture (Admin)
  LEAD   // Leadership (Nominator/Voter/Rater)
  STAFF  // Regular staff
}

enum UserSegment {
  Language      // Language Division (Blues)
  International // International (Greens)
  Whole         // Whole school
}

model User {
  id        String      @id @default(cuid())
  email     String      @unique
  name      String?
  role      UserRole    @default(STAFF)
  segment   UserSegment @default(Whole)
  title     String?
  department String?
  emailVerified DateTime?
  image     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  accounts            Account[]
  sessions            Session[]
  
  // EOM Relations
  nominations         EomNomination[]      @relation("Nominator")
  receivedNominations EomNomination[]      @relation("Nominee")
  votes               EomVote[]
  wins                EomWinner[]
  
  // MRE Relations
  raterAssignments    MreAssignment[]      @relation("Rater")
  targetAssignments   MreAssignment[]      @relation("Target")
  
  // Activity
  activityLogs        ActivityLog[]
  notifications       Notification[]

  @@map("users")
}

// ============================================================================
// Employee of the Month (EOM)
// ============================================================================

model EomCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  active      Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())

  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  active      Boolean         @default(true)
  order       Int             @default(0)
  createdAt   DateTime        @default(now())
  
  nominations EomNomination[]
  votes       EomVote[]
  winners     EomWinner[]

  @@map("eom_categories")
}

enum EomCycleStatus {
  DRAFT
  NOMINATING
  VERIFYING
  VOTING
  CLOSED
}

model EomCycle {
  id        String         @id @default(cuid())
  year      Int
  month     Int // 1-12
  term      String // e.g., "2025-T1"
  status    EomCycleStatus @default(DRAFT)
  openedAt  DateTime?
  closedAt  DateTime?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  id          String          @id @default(cuid())
  year        Int
  month       Int             // 1-12
  term        String          // e.g., "2025-T1"
  status      EomCycleStatus  @default(DRAFT)
  openedAt    DateTime?
  closedAt    DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  nominations EomNomination[]
  votes       EomVote[]
  winners     EomWinner[]

  @@unique([year, month])
  @@map("eom_cycles")
}

model EomNomination {
  id           String    @id @default(cuid())
  id           String      @id @default(cuid())
  cycleId      String
  categoryId   String
  nomineeId    String
  nominatorId  String
  reason       String    @db.Text
  verifiedByPC Boolean   @default(false)
  verifiedAt   DateTime?
  verifiedById String?
  createdAt    DateTime  @default(now())

  cycle     EomCycle    @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  category  EomCategory @relation(fields: [categoryId], references: [id])
  nominee   User        @relation("Nominee", fields: [nomineeId], references: [id])
  nominator User        @relation("Nominator", fields: [nominatorId], references: [id])
  reason       String      @db.Text
  verifiedByPC Boolean     @default(false)
  verifiedAt   DateTime?
  verifiedById String?
  createdAt    DateTime    @default(now())
  
  cycle     EomCycle     @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  category  EomCategory  @relation(fields: [categoryId], references: [id])
  nominee   User         @relation("Nominee", fields: [nomineeId], references: [id])
  nominator User         @relation("Nominator", fields: [nominatorId], references: [id])

  @@unique([cycleId, categoryId, nomineeId])
  @@map("eom_nominations")
}

model EomVote {
  id         String   @id @default(cuid())
  cycleId    String
  categoryId String
  voterId    String
  nomineeId  String
  createdAt  DateTime @default(now())

  
  cycle    EomCycle    @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  category EomCategory @relation(fields: [categoryId], references: [id])
  voter    User        @relation(fields: [voterId], references: [id])

  @@unique([voterId, cycleId, categoryId])
  @@map("eom_votes")
}

model EomWinner {
  id            String    @id @default(cuid())
  cycleId       String
  categoryId    String
  winnerId      String
  approvedByCeo Boolean   @default(false)
  approvedAt    DateTime?
  announcedOn   DateTime?
  createdAt     DateTime  @default(now())

  
  cycle    EomCycle    @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  category EomCategory @relation(fields: [categoryId], references: [id])
  winner   User        @relation(fields: [winnerId], references: [id])

  @@unique([cycleId, categoryId])
  @@map("eom_winners")
}

// ============================================================================
// Multi-Rater Evaluation (MRE)
// ============================================================================

enum MreCycleStatus {
  DRAFT
  OPEN
  CLOSED
}

enum MreTargetGroup {
  ADMIN
  ACADEMIC
}

model MreCycle {
  id        String         @id @default(cuid())
  code      String         @unique // e.g., "2024-R1"
  opensAt   DateTime
  closesAt  DateTime
  status    MreCycleStatus @default(DRAFT)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  assignments    MreAssignment[]
  weightMatrices MreWeightMatrix[]
  domainWeights  MreDomainWeight[]
  id          String          @id @default(cuid())
  code        String          @unique // e.g., "2024-R1"
  opensAt     DateTime
  closesAt    DateTime
  status      MreCycleStatus  @default(DRAFT)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  assignments     MreAssignment[]
  weightMatrices  MreWeightMatrix[]
  domainWeights   MreDomainWeight[]

  @@map("mre_cycles")
}

model MreRaterContext {
  id    String @id @default(cuid())
  code  String @unique // CEO, PC, MANAGER, PEER, QA, HOD, PRINCIPAL, SELF
  label String

  
  weightMatrices MreWeightMatrix[]
  domainWeights  MreDomainWeight[]
  assignments    MreAssignment[]

  @@map("mre_rater_contexts")
}

model MreWeightMatrix {
  id             String         @id @default(cuid())
  cycleId        String
  targetGroup    MreTargetGroup
  raterContextId String
  weight         Int // percentage
  required       Boolean        @default(true)
  min            Int            @default(1)
  max            Int?

  cycle        MreCycle        @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  raterContext MreRaterContext @relation(fields: [raterContextId], references: [id])
  id              String         @id @default(cuid())
  cycleId         String
  targetGroup     MreTargetGroup
  raterContextId  String
  weight          Int            // percentage
  required        Boolean        @default(true)
  min             Int            @default(1)
  max             Int?
  
  cycle         MreCycle        @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  raterContext  MreRaterContext @relation(fields: [raterContextId], references: [id])

  @@unique([cycleId, targetGroup, raterContextId])
  @@map("mre_weight_matrices")
}

model MreDomain {
  id    String @id @default(cuid())
  code  String @unique
  label String

  
  domainWeights MreDomainWeight[]
  domainScores  MreDomainScore[]

  @@map("mre_domains")
}

model MreDomainWeight {
  id             String         @id @default(cuid())
  cycleId        String
  targetGroup    MreTargetGroup
  raterContextId String
  domainId       String
  weight         Int // percentage

  cycle        MreCycle        @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  raterContext MreRaterContext @relation(fields: [raterContextId], references: [id])
  domain       MreDomain       @relation(fields: [domainId], references: [id])
  id              String         @id @default(cuid())
  cycleId         String
  targetGroup     MreTargetGroup
  raterContextId  String
  domainId        String
  weight          Int            // percentage
  
  cycle         MreCycle        @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  raterContext  MreRaterContext @relation(fields: [raterContextId], references: [id])
  domain        MreDomain       @relation(fields: [domainId], references: [id])

  @@unique([cycleId, targetGroup, raterContextId, domainId])
  @@map("mre_domain_weights")
}

enum MreAssignmentStatus {
  PENDING
  SUBMITTED
}

model MreAssignment {
  id             String              @id @default(cuid())
  cycleId        String
  raterId        String
  targetId       String
  raterContextId String
  status         MreAssignmentStatus @default(PENDING)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  cycle        MreCycle        @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  rater        User            @relation("Rater", fields: [raterId], references: [id])
  target       User            @relation("Target", fields: [targetId], references: [id])
  raterContext MreRaterContext @relation(fields: [raterContextId], references: [id])
  evaluation   MreEvaluation?
  id              String              @id @default(cuid())
  cycleId         String
  raterId         String
  targetId        String
  raterContextId  String
  status          MreAssignmentStatus @default(PENDING)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  cycle         MreCycle        @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  rater         User            @relation("Rater", fields: [raterId], references: [id])
  target        User            @relation("Target", fields: [targetId], references: [id])
  raterContext  MreRaterContext @relation(fields: [raterContextId], references: [id])
  evaluation    MreEvaluation?

  @@unique([cycleId, raterId, targetId, raterContextId])
  @@map("mre_assignments")
}

model MreEvaluation {
  id           String   @id @default(cuid())
  assignmentId String   @unique
  composite    Decimal  @db.Decimal(5, 2)
  submittedAt  DateTime @default(now())

  id            String   @id @default(cuid())
  assignmentId  String   @unique
  composite     Decimal  @db.Decimal(5, 2)
  submittedAt   DateTime @default(now())
  
  assignment   MreAssignment    @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  domainScores MreDomainScore[]

  @@map("mre_evaluations")
}

model MreDomainScore {
  id           String @id @default(cuid())
  evaluationId String
  domainId     String
  score        Int // 1-5 Likert scale

  id            String @id @default(cuid())
  evaluationId  String
  domainId      String
  score         Int    // 1-5 Likert scale
  
  evaluation MreEvaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  domain     MreDomain     @relation(fields: [domainId], references: [id])

  @@unique([evaluationId, domainId])
  @@map("mre_domain_scores")
}

// ============================================================================
// System & Audit
// ============================================================================

model ActivityLog {
  id        String   @id @default(cuid())
  actorId   String?
  action    String
  meta      Json?
  createdAt DateTime @default(now())

  
  actor User? @relation(fields: [actorId], references: [id], onDelete: SetNull)

  @@map("activity_logs")
}

model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  valueJson Json
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model Notification {
  id      String    @id @default(cuid())
  userId  String
  type    String
  payload Json
  sentAt  DateTime  @default(now())
  readAt  DateTime?

  id        String    @id @default(cuid())
  userId    String
  type      String
  payload   Json
  sentAt    DateTime  @default(now())
  readAt    DateTime?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
